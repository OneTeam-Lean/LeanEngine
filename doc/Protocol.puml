@startuml
package workflowcontext.workflow{

package workflow {
class Workflow  <<Entity>> {
  - String id
  - String name
  - Status lastExecutionStatus
  - List<lanes> lanes
  - List<Component> components
  - List<Diagram> diagrams
  - List<WorkflowExecution> workflowExecutions
  + boolean isLastExecutionCompleted()
  + Status execute()
}

class WorkflowExecution <<Value Object>>{
  - LocalDateTime startDateTime
  - LocalDateTime endDateTime
  - Status workflowExecutionStatus
  - List<ComponentExecution> componentExecutions
  - Map<String, ComponentExecution> componentMap
  - void turnExecutionToSuccessStatus()
  - void turnExecutionToFailedStatus()
  + ComponentExecution getComponentExecutionById()
  + ComponentExecutionData getComponentExecutionData()
  + Status getComponentExecutedStatus()
  + Status execute()

}

class ComponentExecution <<Value Object>>{
  - String componentId
  - LocalDateTime startDateTime
  - LocalDateTime endDateTime
  - Component component
  - ComponentExecutionData componentExecutionData
  + ComponentExecution of(Component component)
  + ComponentData getData(String key)
  + void updateData(
      LocalDateTime startDateTime, LocalDateTime endDateTime, ComponentExecutionData data)
  + Status getStatus()
  + void execute(WorkflowExecution workflowExecution)
  + void updateExecuteFailed(LocalDateTime startDateTime, LocalDateTime endDateTime)
  + boolean isBlocked()
  + boolean isCompleted()
}

class ComponentData <<Value Object>>{
  - Status componentExecutionStatus
  - ImmutableMap<String, Object> data
  +  ComponentExecutionData createFailedData()
  +  ComponentExecutionData createRunningData()
  +  ComponentExecutionData createSuccessAndEmptyData()
  +  ComponentExecutionData createSuccessData(Map<String, Object> data)
  +  ComponentExecutionData createBlockData()
}
enum Status{
    PENDING
    RUNNING
    FAILED
    SUCCESS
    BLOCKED
    CANCELED
    + boolean isCompletedStatus()
    + boolean isValidExecutedStatus()
}
Status <--* Workflow
Status <--* WorkflowExecution
Status <--* ComponentData
Workflow "1"*-->"0...*" WorkflowExecution
WorkflowExecution "1"*-->"0...*" ComponentExecution
ComponentExecution "1"*-->"1" ComponentData


}


package components{
 abstract class Component {
  - ComponentType componentType
  - String id
  - String name
  - LocalDateTime startTime
  - LocalDateTime endTime
  - List<String> nextComponentIds
  + ComponentExecutionData executeComponent()
}
enum ComponentType{
  SEQUENCE_FLOW
  START_EVENT
  END_EVENT
  INTERMEDIATE_EVENT
  AUTO_TASK
  MANUAL_TASK
  INCLUSIVE_GATEWAY
  EXCLUSIVE_GATEWAY
  PARALLELG_ATEWAY
}
ComponentType <--* Component

abstract class Flow {
    - String sourceComponentId
    - String targetComponentId
}
abstract class Event {
}
abstract class Activity {
}
abstract class Gateway {
    - List<String> sourceComponentId
    - List<String> targetComponentId
}

  Component <|.. Flow
  Component <|.. Event
  Component <|.. Activity
  Component <|.. Gateway
class StartEvent<<Value Object>>{

}
class EndEvent<<Value Object>>{

}
class IntermediateEvent<<Value Object>>{

}
  Event <|-- StartEvent
  Event <|-- IntermediateEvent
  Event <|-- EndEvent

class AutoTask<<Value Object>>{

}
class ManualTask<<Value Object>>{

}

 Activity <|-- AutoTask
 Activity <|-- ManualTask

class ConditionalGateway<<Value Object>>{

}
class ParallelGatewayHead<<Value Object>>{

}
class ParallelGatewayTail<<Value Object>>{
  -List<String> fromComponentsIds
}
 Gateway <|-- ConditionalGateway
 Gateway <|-- ParallelGatewayHead
 Gateway <|-- ParallelGatewayTail

class SequenceFlow<<Value Object>>{
    - fromComponentId
    - toComponentId
}
 Flow <|-- SequenceFlow

 Workflow "1" *--> "0...*" Component

 Component ..> WorkflowExecution
 note on link : 封装暴露了?
}


package diagram{

abstract class Diagram{
    - diagramType
}


class Shape <<Value Object>>{
    - componentId
    - size
    - position
}
class Edge<<Value Object>>{
    - fromComponentId
    - toComponentId
    - fromAnchor
    - toAnchor
}
class Lane<<Value Object>>{
    - id
    - name
    - componentIds
}
class Size<<Value Object>>{
    - height
    - width
}
class Position<<Value Object>>{
    - x
    - y
}
enum DiagramType{
    SHAPE
    EDGE
}
enum Anchor{
    First
    Second
    Third
    Fourth
}
 DiagramType <--* Diagram

 Diagram <|-- Shape
 Diagram <|-- Edge

 Shape *--> Size
 Shape *--> Position

 Edge *--> Anchor
 Workflow "1" *--> "0...*" Diagram

 Workflow "1" *-->"0...*"Lane
}

}
@enduml