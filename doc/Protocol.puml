@startuml
package workflowcontext.workflow{


package components{
 abstract class Component {
 - id:String
 - componentType:ComponentType
 - nextComponentIds:List<String>
}
abstract class Flow {
    - flowComment:String
}
abstract class Event {
}
abstract class Activity {
}
abstract class Gateway {
}
enum ComponentType{
  WORKFLOW
  LANE
  SEQUENCE_FLOW
  START_EVENT
  END_EVENT
  INTERMEDIATE_EVENT
  AUTO_TASK
  MANUAL_TASK

}
  Component <|-- Flow
  Component <|-- Event
  Component <|-- Activity
  Component <|-- Gateway
  ComponentType "1"-*"1" Component
}


package Container{
abstract class Container {
    - containerName:String
}


  Container <|-- Workflow
class Lane{
    - id
    - componentIds
}
  Container <|-- Lane
}
package workflow{
class Workflow {
    - id
    - components
    - lanes
    - diagrams
    - runId
}
}


class StartEvent{

}
class EndEvent{

}
class IntermediateEvent{

}
  Event <|-- StartEvent
  Event <|-- IntermediateEvent
  Event <|-- EndEvent

class AutoTask{

}
class ManualTask{

}

 Activity <|-- AutoTask
 Activity <|-- ManualTask

class InclusiveGateway{

}
class ExclusiveGateway{

}
class ParallelGateway{

}
 Gateway <|-- InclusiveGateway
 Gateway <|-- ExclusiveGateway
 Gateway <|-- ParallelGateway

class SequenceFlow{
    - fromComponentId
    - toComponentId
}
 Flow <|-- SequenceFlow

  Lane                  "0..*" <--o "0..1" Workflow
  SequenceFlow          "0..*" <--o "0..1" Workflow
  StartEvent            "0..*" <--o "0..1" Workflow
  EndEvent              "0..*" <--o "0..1" Workflow
  IntermediateEvent     "0..*" <--o "0..1" Workflow
  AutoTask              "0..*" <--o "0..1" Workflow
  ManualTask            "0..*" <--o "0..1" Workflow
  InclusiveGateway      "0..*" <--o "0..1" Workflow
  ExclusiveGateway      "0..*" <--o "0..1" Workflow
  ParallelGateway       "0..*" <--o "0..1" Workflow

}


package workflowcontext.diagram{

abstract class Diagram{
    - diagramType
}
enum DiagramType{
    SHAPE
    EDGE
}

class Shape <<Value>>{
    - componentId
    - size
    - position
}
class Edge<<Value>>{
    - fromComponentId
    - toComponentId
    - fromAnchor
    - toAnchor
}

class Size<<Value>>{
    - height
    - width
}
class Position<<Value>>{
    - x
    - y
}

enum Anchor{
    First
    Second
    Third
    Fourth
}
 DiagramType <-* Diagram

 Diagram <|-- Shape
 Diagram <|-- Edge

 Shape *--> Size
 Shape *--> Position

 Edge *--> Anchor
}

 Workflow "0..1"*-->"0..*" Diagram
@enduml